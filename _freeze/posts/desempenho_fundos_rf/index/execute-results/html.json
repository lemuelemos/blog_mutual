{
  "hash": "bc765793c85930c282dded224049fe15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Desempenho dos Fundos de Renda Fixa\"\nauthor: \"Lemuel Lemos\"\ndate: \"2025-03-01\"\ncategories: [fundos de investimentos, desempenho, renda fixa]\nimage: \"image.jpg\"\nexecute:\n  warning: false\n  message: false\n---\n\n\n\nDesde que concluí minha tese sobre fundos de investimento, no início de 2014, venho considerando publicar posts regulares sobre o tema. O objetivo é construir uma base de conhecimento e compartilhar insights relevantes. Embora existam páginas que comparam fundos, ainda são raras as discussões que abordam a indústria de forma mais abrangente, analisando aspectos como captação, rentabilidade, risco e diversas outras métricas. Neste espaço, a proposta é analisar os dados de forma agregada, sem focar em fundos individuais.\n\nNeste primeiro post, abordaremos questões mais técnicas, como o download dos dados, tratamento, integração de bases e outros processos necessários para nossas análises. Começaremos analisando as três principais classes de fundos: renda fixa, multimercados e ações. Esta será a primeira de uma série de três publicações, cada uma dedicada a uma das classes mencionadas.\n\nVamos cobrir todas as etapas do processo, como coleta dos dados, limpeza, manipulação e armazenamento. Além do processamento dos dados, vamos criar nossas análises sobre essas informações, a fim de entender o comportamento da indústria de fundos.\n\n### Fonte de Dados\n\nVamos utilizar como base de dados primária os dados presentes na <a href=\"https://dados.cvm.gov.br/group/fundos-de-investimento\" target=\"_blank\">CVM</a>, de onde pegaremos todos os dados referentes aos dados de cotas, dados cadastrais e o que é chamado de extrato de informações. Além disso, vamos utilizar dados fornecidos pela ANBIMA. Vamos utilizar as classificações dos fundos presentes nos dados cadastrais que a instituição utiliza. A escolha de utilização da classificação ANBIMA, está no fato de que durante o processo de tratamento de dados em minha tese de doutorado, percebi algumas inconsistências na base da CVM. \n\n### Aquisição de dados\n\nOs primeiros dados que iremos baixar são aqueles referentes às cotas, ao PL e à captação dos fundos de investimento disponíveis no portal de dados abertos da <a href=\"https://dados.cvm.gov.br/group/fundos-de-investimento\" target=\"_blank\">CVM</a>. O nome da base é: <a href=\"https://dados.cvm.gov.br/dataset/fi-doc-inf_diario\" target=\"_blank\">Informe Diário</a>.\n\nA CVM nos alerta que esses dados podem ser reapresentados em até M-11, além de dividi-los em dois repositórios: um contendo dados históricos desde 2000 até 2020, e outro com dados de 2021 até os dias atuais. Vamos baixar ambos. Faremos o download de arquivos compactados, que serão descompactados e carregados em nossa base de dados. Após a descompactação, uniremos todos os arquivos em uma única base.\n\nPara lidar com o grande volume de dados, vamos paralelizar nossa execução usando o pacote `furrr`. Além disso, utilizaremos os pacotes `dplyr` e `tidyr` para realizar a manipulação dos dados em memória, enquanto o `pins` nos servirá como repositório para armazená-los. Para nosso banco de dados, adotaremos o **DuckDB**, o que nos permitirá trabalhar de forma eficiente com grandes tabelas em disco, e contaremos ainda com o pacote `dbplyr` para manipular os dados diretamente no banco.\n\nPrimeira coisa que vamos fazer é carrregar os pacotes necessários e conectar ao nosso banco. Lembro que se você for fazer isos em sua máquina o caminho que está sendo utilizando no parâmetro `dbdir` tem que ser relativo a sua própria pasta. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(tidyr)\nlibrary(furrr)\n\n# Conectando a base de dados\n\ncon <- DBI::dbConnect(duckdb::duckdb(), \n                 dbdir = \"fundos_db.duckdb\",\n                 read_only = FALSE)\n```\n:::\n\n\n\nPara obter o conjunto completo de dados, vamos acessar os endereços [HIST](https://dados.cvm.gov.br/dados/FI/DOC/INF_DIARIO/DADOS/HIST/) e [DADOS](https://dados.cvm.gov.br/dados/FI/DOC/INF_DIARIO/DADOS/) para baixar todos os arquivos disponíveis. Para otimizar essa etapa, utilizaremos as funções de paralelização do pacote `furrr`, configurando quatro clusters para realizar as requisições simultaneamente e, assim, agilizar o processo de download.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando a sequência de datas para criar as urls de download\n\nanos_download <- seq(2000,2020,1)\nmeses_download <- format(seq(as.Date(\"2021-01-01\"),\n                             as.Date(\"2025-01-01\"),\n                             by = \"month\"),\n                         \"%Y%m\")\n\n# Definindo o número de workers\nfuture::plan(future::multisession, \n             workers = 6)\n\n# Fazendo donwload dos arquivos de 2000 a 2020\n\nfurrr::future_walk(anos_download, function(ano){\n  options(timeout = 600)\n  url <- paste0(\"https://dados.cvm.gov.br/dados/FI/DOC/INF_DIARIO/DADOS/HIST/inf_diario_fi_\",\n                ano,\n                \".zip\")\n  destfile <- paste0(\"./informe_diario/\",ano,\".zip\")\n  utils::download.file(url,destfile,mode = \"wb\")\n},.progress = T)\n\nzipfiles <- list.files(\"./informe_diario/\",full.names = T)\n\nfurrr::future_walk(zipfiles,function(path){\n  unzip(path,exdir = \"./informe_diario/\")\n})\n             \n# Fazendo donwload dos arquivos de 2021 a janeiro de 2025 \n\nfurrr::future_walk(meses_download, function(mes){\n  options(timeout = 600)\n  url <- paste0(\"https://dados.cvm.gov.br/dados/FI/DOC/INF_DIARIO/DADOS/inf_diario_fi_\",\n                mes,\n                \".zip\")\n  destfile <- paste0(\"./informe_diario/\",mes,\".zip\")\n  download.file(url,destfile)\n})\n\n# Dezipando arquivos \n\nzipfiles <- list.files(\"./informe_diario/\",full.names = T)\n\nfurrr::future_walk(zipfiles,function(path){\n  unzip(path,exdir = \"./informe_diario/\")\n})\n\n# Deletando arquivos baixados\n\ninvisible(file.remove(list.files(\"./posts/desempenho_fundos_rf/informe_diario/\",\n                                 full.names = T)))\n\n# Excluindo os workers da paralelização\nfuture::plan(future::sequential)\n```\n:::\n\n\n\nDepois de baixar todos os arquivos, precisamos ler cada um dos CSVs e unificá-los em um único objeto. Essa etapa pode ser bastante exigente em termos de recursos e, por isso, pode não rodar tão facilmente em alguns computadores. No meu caso, como a minha máquina tem 32 GB de memória, consegui processar tudo sem maiores problemas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narquivos_csv <- list.files(\"./informe_diario/\",full.names = T,pattern = \".csv\")\n\nfuture::plan(future::multisession, workers = 6)\nfurrr::future_map(arquivos_csv, function(arquivo){\n  readr::read_delim(arquivo, \n    delim = \";\", escape_double = FALSE, trim_ws = TRUE)\n},.progress = T) -> informes_diarios\n\nfuture::plan(future::sequential)\n\ninformes_diarios %>% \n  bind_rows() -> informes_diarios\n```\n:::\n\n\n\nDeltando o objeto com todos os CSVs lidos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbWriteTable(con,\"informes_diarios\",informes_diarios)\nrm(informes_diarios)\n```\n:::\n\n\n### ETL dos Dados\n\nPrimeiro passo para começarmos o ETL de nossos dados consiste em conetarmos com nossa base de dados. Vamos utilizar a função do `dplyr` `tbl`. Isso nos permite lidar com a tabela que está no nosso banco do DuckDB como se fosse um DF dentro de nosso projeto. Os arquivos que baixamos possuem todos os tipos de fundos. Aqui vamos nos concentrar nos fundos de investimentos tradicionais, os conhecido por fazerem parte da instrução CVM 175. Para fazer isso vamos filtrar nossa base somente com estes fundos, onde vamos filtrar somente os fundos com a designação **FI** na base. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninformes_diarios_fi <- tbl(con,\"informes_diarios\") %>% \n  filter(TP_FUNDO == \"FI\")\n```\n:::\n\n\n\nVamos começar integrando à base de dados fornecida pela ANBIMA. Primeiro, leremos o arquivo e o salvaremos em nossa base do DuckDB. Em seguida, faremos a união das duas fontes de dados, o que nos permitirá filtrar apenas as classes de fundos que desejamos para este primeiro momento, focando nos fundos de renda fixa.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfundos_175_anbima <- readxl::read_excel(\"fundos-175-caracteristicas-publico-22-02-2025-12-01-14.xlsx\")\nDBI::dbWriteTable(con,\"fundos_175_anbima\",fundos_175_anbima)\nrm(fundos_175_anbima)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninformes_diarios_fi %>% \n  mutate(CNPJ_FUNDO = sql(\"regexp_replace(CNPJ_FUNDO, '[^0-9]', '', 'g')\")) %>% \n  left_join(\n    tbl(con,\"fundos_175_anbima\") %>% \n      select(`Código ANBIMA`,\n             Estrutura,\n             `CNPJ do Fundo`,\n             `Nome Comercial`,\n             Status,\n             `Categoria ANBIMA`,\n             `Tipo ANBIMA`,\n             `Composição do Fundo`,\n             `Aberto Estatutariamente`,\n              `Tributação Alvo`,\n             `Primeiro Aporte`,\n             `Tipo de Investidor`,\n             `Característica do Investidor`,\n             `Cota de Abertura`,\n             `Aplicação Inicial Mínima`,\n             `Prazo Pagamento Resgate em dias`),\n    by = c(\"CNPJ_FUNDO\" = \"CNPJ do Fundo\")\n  ) %>% \n  filter(`Categoria ANBIMA` == \"Renda Fixa\") %>% \n  collect()-> fundos_rf\n```\n:::\n\n\n\nDepois de realizar esses processamentos, vamos conferir a quantidade de fundos com os quais trabalharemos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfundos_rf %>% \n  distinct(CNPJ_FUNDO,`Categoria ANBIMA`,`Tipo ANBIMA`) %>% \n  count(`Categoria ANBIMA`,`Tipo ANBIMA`) %>% \n  arrange(-n) %>% \n  rename(Quantidade = n) %>% \n  reactable::reactable(\n    pagination = FALSE,  # Remove a paginação da tabela\n    columns = list(\n      # Garante mais espaço para os nomes longos\n      `Tipo ANBIMA` = reactable::colDef(width = 400), \n      Quantidade = reactable::colDef(\n        align = \"right\",\n        # Formata números com separador de milhar\n        format = reactable::colFormat(separators = TRUE)\n      )\n    ),\n    # Garante que todas as colunas tenham um tamanho mínimo\n    defaultColDef = reactable::colDef(minWidth = 100)  \n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-23b306dcaffba53ed38e\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-23b306dcaffba53ed38e\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Categoria ANBIMA\":[\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\",\"Renda Fixa\"],\"Tipo ANBIMA\":[\"Renda Fixa Duração Livre Crédito Livre\",\"Renda Fixa Duração Livre Grau de Investimento\",\"Renda Fixa Duração Baixa Grau de Investimento\",\"Renda Fixa Duração Livre Soberano\",\"Renda Fixa Duração Baixa Soberano\",\"Renda Fixa Indexados\",\"Renda Fixa Simples\",\"Renda Fixa Duração Média Grau de Investimento\",\"Renda Fixa Investimento no Exterior\",\"Renda Fixa Duração Alta Grau de Investimento\",\"Renda Fixa Duração Baixa Crédito Livre\",\"Renda Fixa Duração Média Crédito Livre\",\"Renda Fixa Duração Alta Crédito Livre\",\"Renda Fixa Duração Média Soberano\",\"Renda Fixa Duração Alta Soberano\",\"Renda Fixa Dívida Externa\"],\"Quantidade\":[1011,832,501,284,243,169,123,104,71,61,35,33,18,17,16,5]},\"columns\":[{\"id\":\"Categoria ANBIMA\",\"name\":\"Categoria ANBIMA\",\"type\":\"character\",\"minWidth\":100},{\"id\":\"Tipo ANBIMA\",\"name\":\"Tipo ANBIMA\",\"type\":\"character\",\"minWidth\":100,\"width\":400},{\"id\":\"Quantidade\",\"name\":\"Quantidade\",\"type\":\"numeric\",\"minWidth\":100,\"format\":{\"cell\":{\"separators\":true},\"aggregated\":{\"separators\":true}},\"align\":\"right\"}],\"pagination\":false,\"dataKey\":\"7128c4a99ebb2cd57f9343337694fba9\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-2.0.0/react-tools.umd.cjs\"></script>\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}